/**
 * VEYRA v2 - Sistema de Prote√ß√£o de Sites
 * Vers√£o: 2.0.0
 *
 * Uso Simples:
 * <script src="https://veyra-ten.vercel.app/veyra.js"></script>
 * <script>Veyra.init("SUA_API_KEY_AQUI");</script>
 *
 * Uso Avan√ßado:
 * <script src="https://veyra-ten.vercel.app/veyra.js"></script>
 * <script>
 *   Veyra.init("SUA_API_KEY_AQUI", {
 *     debug: true,
 *     checkInterval: 30000
 *   });
 * </script>
 */

(function() {
  'use strict';

  // PROTE√á√ÉO INSTANT√ÇNEA - Executar imediatamente
  // Ocultar conte√∫do at√© verificar status da prote√ß√£o
  (function() {
    const instantStyle = document.createElement('style');
    instantStyle.id = 'veyra-instant-hide';
    instantStyle.textContent = `
      html { visibility: hidden !important; opacity: 0 !important; }
      .veyra-protection-active { visibility: visible !important; opacity: 1 !important; }
    `;
    if (document.head) {
      document.head.appendChild(instantStyle);
    } else {
      document.addEventListener('DOMContentLoaded', function() {
        document.head.appendChild(instantStyle);
      });
    }
  })();

  // Configura√ß√µes
  let config = {
    apiKey: null,
    apiUrl: 'https://veyra-ten.vercel.app/api',  // URL fixa do servidor VEYRA
    checkInterval: 10000, // 10 segundos (mais r√°pido)
    debug: false
  };

  // Estado interno
  let isInitialized = false;
  let checkTimer = null;
  let originalContent = null;
  let isProtectionActive = false;

  // Aplicar prote√ß√£o instant√¢nea via CSS (evita flash do conte√∫do original)
  function applyInstantProtection() {
    // Criar CSS para ocultar conte√∫do original imediatamente
    const style = document.createElement('style');
    style.id = 'veyra-instant-protection';
    style.textContent = `
      body:not(.veyra-ready) {
        display: none !important;
      }
      body.veyra-ready {
        display: block !important;
      }
    `;
    document.head.appendChild(style);
    log('Prote√ß√£o instant√¢nea aplicada via CSS para ocultar conte√∫do');
  }

  // Remover prote√ß√£o instant√¢nea
  function removeInstantProtection() {
    // Remover estilo de oculta√ß√£o instant√¢nea
    const instantHide = document.getElementById('veyra-instant-hide');
    if (instantHide) {
      instantHide.remove();
    }
    
    // Remover estilo de prote√ß√£o
    const style = document.getElementById('veyra-instant-protection');
    if (style) {
      style.remove();
    }
    
    // Adicionar classe e tornar vis√≠vel
    document.documentElement.classList.add('veyra-protection-active');
    document.body.classList.add('veyra-ready');
    log('Prote√ß√£o instant√¢nea removida');
  }

  // Conte√∫do alternativo (ser√° carregado da API)
  let alternativeContent = {
    title: 'Solu√ß√µes Empresariais - Sua Empresa',
    css: `
      * { margin: 0; padding: 0; box-sizing: border-box; }
      body {
        font-family: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 50%, #3b82f6 100%);
        color: white;
        min-height: 100vh;
        line-height: 1.6;
      }
      .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
      .hero { text-align: center; padding: 4rem 0; }
      .hero h1 { font-size: 3rem; margin-bottom: 1rem; }
      .hero p { font-size: 1.2rem; opacity: 0.9; }
      .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem; margin: 4rem 0; }
      .service-card { background: rgba(255,255,255,0.1); padding: 2rem; border-radius: 1rem; text-align: center; }
      .contact { background: rgba(255,255,255,0.1); padding: 2rem; border-radius: 1rem; margin-top: 4rem; }
    `,
    html: `
      <div class="container">
        <div class="hero">
          <h1>üè¢ Solu√ß√µes Profissionais</h1>
          <p>Transformamos ideias em resultados excepcionais para o seu neg√≥cio</p>
        </div>
        <div class="services">
          <div class="service-card">
            <h3>üíº Consultoria</h3>
            <p>Estrat√©gias personalizadas para o crescimento da sua empresa</p>
          </div>
          <div class="service-card">
            <h3>üöÄ Desenvolvimento</h3>
            <p>Solu√ß√µes tecnol√≥gicas inovadoras e escal√°veis</p>
          </div>
          <div class="service-card">
            <h3>üìä Analytics</h3>
            <p>An√°lise de dados para decis√µes inteligentes</p>
          </div>
        </div>
        <div class="contact">
          <h2>Entre em Contato</h2>
          <p>Pronto para transformar seu neg√≥cio? Fale conosco!</p>
          <p>üìß contato@suaempresa.com | üì± (11) 99999-9999</p>
        </div>
      </div>
    `
  };

  // Fun√ß√µes utilit√°rias
  function log(message, type = 'info') {
    if (config.debug) {
      console.log(`[CLYM ${type.toUpperCase()}]`, message);
    }
  }

  function error(message) {
    console.error('[CLYM ERROR]', message);
  }

  // Fun√ß√£o para fazer requisi√ß√µes √† API
  async function apiRequest(endpoint, options = {}) {
    try {
      const response = await fetch(`${config.apiUrl}${endpoint}`, {
        headers: {
          'Authorization': `Bearer ${config.apiKey}`,
          'Content-Type': 'application/json',
          ...options.headers
        },
        ...options
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return await response.json();
    } catch (err) {
      error(`API request failed: ${err.message}`);
      return null;
    }
  }

  // Buscar conte√∫do alternativo da API
  async function loadAlternativeContent() {
    try {
      const result = await apiRequest('/dashboard/content');
      if (result && result.success && result.data) {
        alternativeContent = {
          title: result.data.title || 'Site em Manuten√ß√£o',
          css: result.data.css || alternativeContent.css,
          html: result.data.html || alternativeContent.html
        };
        log('Conte√∫do alternativo carregado da API');
      }
    } catch (error) {
      log('Usando conte√∫do alternativo padr√£o', 'warn');
    }
  }

  // Verificar status da prote√ß√£o
  async function checkProtectionStatus() {
    log('Verificando status da prote√ß√£o...');

    const result = await apiRequest('/protection/status');

    if (result && result.success) {
      const newStatus = result.data.isActive;

      if (newStatus !== isProtectionActive) {
        log(`Status mudou: ${isProtectionActive} -> ${newStatus}`);
        isProtectionActive = newStatus;

        if (isProtectionActive) {
          // Carregar conte√∫do alternativo antes de mostrar
          await loadAlternativeContent();
          showAlternativeContent();
        } else {
          showOriginalContent();
        }
      } else {
        log(`Status confirmado: ${isProtectionActive ? 'Ativa' : 'Inativa'}`);
      }
    } else {
      log('Falha ao verificar status - desativando prote√ß√£o', 'warn');
      if (isProtectionActive) {
        showOriginalContent();
        isProtectionActive = false;
      }
    }
  }

  // Salvar conte√∫do original
  function saveOriginalContent() {
    if (!originalContent) {
      // Verificar se DOM est√° pronto
      if (!document.head || !document.body) {
        log('DOM n√£o est√° pronto, aguardando...', 'warn');
        return;
      }

      originalContent = {
        title: document.title,
        head: document.head.innerHTML,
        body: document.body.innerHTML
      };
      log('Conte√∫do original salvo');
    }
  }

  // Mostrar conte√∫do alternativo
  function showAlternativeContent() {
    log('Mostrando conte√∫do alternativo');
    log('Conte√∫do a ser aplicado:', alternativeContent);

    // Salvar original se ainda n√£o foi salvo
    saveOriginalContent();

    // Aplicar conte√∫do alternativo
    document.title = alternativeContent.title;

    // Limpar head e adicionar CSS
    document.head.innerHTML = `
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>${alternativeContent.title}</title>
      <style>${alternativeContent.css}</style>
    `;

    // Substituir body
    document.body.innerHTML = alternativeContent.html;

    // Remover prote√ß√£o instant√¢nea e mostrar conte√∫do
    removeInstantProtection();

    // Adicionar script de monitoramento
    const script = document.createElement('script');
    script.textContent = `
      
      // Registrar acesso
      if (window.Veyra && window.Veyra.registerAccess) {
        window.Veyra.registerAccess('alternative');
      }
    `;
    document.body.appendChild(script);

    log('Conte√∫do alternativo aplicado com sucesso');
  }

  // Mostrar conte√∫do original
  function showOriginalContent() {
    if (originalContent) {
      log('Restaurando conte√∫do original');
      
      document.title = originalContent.title;
      document.head.innerHTML = originalContent.head;
      document.body.innerHTML = originalContent.body;
      
      // Remover prote√ß√£o instant√¢nea
      removeInstantProtection();

      // Re-executar scripts se necess√°rio
      const scripts = document.querySelectorAll('script');
      scripts.forEach(script => {
        if (script.src) {
          const newScript = document.createElement('script');
          newScript.src = script.src;
          script.parentNode.replaceChild(newScript, script);
        }
      });
    }
  }

  // Registrar acesso para analytics
  function registerAccess(type) {
    apiRequest('/analytics/access', {
      method: 'POST',
      body: JSON.stringify({
        domain: window.location.hostname,
        type: type,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        referrer: document.referrer
      })
    });
  }

  // API p√∫blica do VEYRA
  window.Veyra = {
    // Inicializar o sistema
    init: async function(apiKey, options = {}) {
      if (isInitialized) {
        log('VEYRA j√° foi inicializado', 'warn');
        return;
      }

      if (!apiKey) {
        error('API Key √© obrigat√≥ria');
        return;
      }

      // Configurar
      config.apiKey = apiKey;
      config.debug = options.debug || false;
      config.checkInterval = options.checkInterval || 10000;

      if (options.apiUrl) {
        config.apiUrl = options.apiUrl;
      }

      log('Inicializando VEYRA...', 'info');
      log(`API URL: ${config.apiUrl}`);
      log(`Check Interval: ${config.checkInterval}ms`);

      // Aguardar DOM estar pronto
      if (document.readyState === 'loading') {
        await new Promise(resolve => {
          document.addEventListener('DOMContentLoaded', resolve);
        });
      }

      // Aplicar prote√ß√£o instant√¢nea para evitar flash
      applyInstantProtection();

      // Salvar conte√∫do original
      saveOriginalContent();

      // Verificar se conseguiu salvar o conte√∫do
      if (!originalContent) {
        log('N√£o foi poss√≠vel salvar conte√∫do original, tentando novamente...', 'warn');
        setTimeout(() => {
          saveOriginalContent();
        }, 100);
      }

      // Verificar status real da prote√ß√£o
      await checkProtectionStatus();

      // Se prote√ß√£o n√£o estiver ativa, remover prote√ß√£o instant√¢nea
      if (!isProtectionActive) {
        removeInstantProtection();
      }

      // Configurar verifica√ß√£o peri√≥dica
      checkTimer = setInterval(checkProtectionStatus, config.checkInterval);

      // Registrar acesso inicial
      registerAccess('initial');

      isInitialized = true;
      log('VEYRA inicializado com sucesso!', 'info');
    },

    // Ativar prote√ß√£o manualmente
    activate: async function() {
      const result = await apiRequest('/protection/activate', { method: 'POST' });
      if (result && result.success) {
        log('Prote√ß√£o ativada manualmente');
        checkProtectionStatus();
      }
    },

    // Desativar prote√ß√£o manualmente
    deactivate: async function() {
      const result = await apiRequest('/protection/deactivate', { method: 'POST' });
      if (result && result.success) {
        log('Prote√ß√£o desativada manualmente');
        checkProtectionStatus();
      }
    },

    // Verificar status atual
    status: async function() {
      const result = await apiRequest('/protection/status');
      return result ? result.data : null;
    },

    // Registrar acesso (para analytics)
    registerAccess: registerAccess,

    // Destruir inst√¢ncia
    destroy: function() {
      if (checkTimer) {
        clearInterval(checkTimer);
        checkTimer = null;
      }
      
      if (isProtectionActive && originalContent) {
        showOriginalContent();
      }

      isInitialized = false;
      log('VEYRA destru√≠do');
    },

    // Configura√ß√µes atuais
    getConfig: function() {
      return { ...config };
    }
  };

  // Auto-inicializa√ß√£o se API key estiver em atributo data
  document.addEventListener('DOMContentLoaded', function() {
    const script = document.querySelector('script[data-veyra-key]');
    if (script) {
      const apiKey = script.getAttribute('data-veyra-key');
      const debug = script.hasAttribute('data-veyra-debug');

      window.Veyra.init(apiKey, { debug });
    }
  });

  log('VEYRA script carregado');

  // Verificar se Veyra foi definido corretamente

})();
